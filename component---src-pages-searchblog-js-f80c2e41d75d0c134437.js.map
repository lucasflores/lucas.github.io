{"version":3,"sources":["webpack:///./src/pages/searchblog.js"],"names":["BlogIndex","props","allPosts","data","allMarkdownRemark","edges","useState","filteredData","query","state","setState","posts","style","textAlign","className","type","aria-label","placeholder","onChange","event","console","log","target","value","filter","post","node","frontmatter","description","title","tags","toLowerCase","includes","join","map","excerpt","slug","fields","date","key","to","dangerouslySetInnerHTML","__html"],"mappings":"2FAAA,4CAuFeA,UApFG,SAAAC,GAChB,IACMC,EADWD,EAATE,KACcC,kBAAkBC,MAIxC,EAA0BC,mBAAS,CACjCC,aAAc,GACdC,MAJiB,KAEZC,EAAP,KAAcC,EAAd,KA+BQH,EAAwBE,EAAxBF,aAAcC,EAAUC,EAAVD,MAEhBG,EADmBJ,GAlCN,KAkCsBC,EACRD,EAAeL,EAEhD,OACE,oCACE,wBAAIU,MAAO,CAAEC,UAAU,WAAvB,WAEA,yBAAKC,UAAU,aACb,2BACEA,UAAU,cACVC,KAAK,OACLC,aAAW,SACXC,YAAY,0BACZC,SAxCkB,SAAAC,GACxBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,IAAMf,EAAQW,EAAMG,OAAOC,MAKrBhB,GAJWN,EAATE,KAEWC,kBAAkBC,OAAS,IAEnBmB,QAAO,SAAAC,GAChC,MAAqCA,EAAKC,KAAKC,YAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,MAAOC,EAA5B,EAA4BA,KAC5B,OACEF,EAAYG,cAAcC,SAASxB,EAAMuB,gBACzCF,EAAME,cAAcC,SAASxB,EAAMuB,gBAClCD,GACCA,EACGG,KAAK,IACLF,cACAC,SAASxB,EAAMuB,kBAIxBrB,EAAS,CACPF,QACAD,qBAsBCI,EAAMuB,KAAI,YAAe,IAAZR,EAAW,EAAXA,KACJS,EAAYT,EAAZS,QAEAC,EAASV,EAAKW,OAAdD,KACR,EAA2CV,EAAKC,YAAlCE,GAAd,EAAQC,KAAR,EAAcD,OAAOS,EAArB,EAAqBA,KAArB,EAA2BV,YAC3B,OACE,6BAASW,IAAKH,GACZ,gCACE,4BACE,kBAAC,OAAD,CAAMI,GAAIJ,GAAOP,IAGnB,2BAAIS,IAEN,iCACE,uBACEG,wBAAyB,CACvBC,OAAQP,MAId","file":"component---src-pages-searchblog-js-f80c2e41d75d0c134437.js","sourcesContent":["import React, { useReact, useState } from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nconst BlogIndex = props => {\n  const { data } = props\n  const allPosts = data.allMarkdownRemark.edges\n\n  const emptyQuery = \"\"\n\n  const [state, setState] = useState({\n    filteredData: [],\n    query: emptyQuery,\n  })\n\n  const handleInputChange = event => {\n    console.log(event.target.value)\n    const query = event.target.value\n    const { data } = props\n\n    const posts = data.allMarkdownRemark.edges || []\n\n    const filteredData = posts.filter(post => {\n      const { description, title, tags } = post.node.frontmatter\n      return (\n        description.toLowerCase().includes(query.toLowerCase()) ||\n        title.toLowerCase().includes(query.toLowerCase()) ||\n        (tags &&\n          tags\n            .join(\"\")\n            .toLowerCase()\n            .includes(query.toLowerCase()))\n      )\n    })\n\n    setState({\n      query,\n      filteredData,\n    })\n  }\n\n  const { filteredData, query } = state\n  const hasSearchResults = filteredData && query !== emptyQuery\n  const posts = hasSearchResults ? filteredData : allPosts\n\n  return (\n    <>\n      <h1 style={{ textAlign: `center` }}>Writing</h1>\n\n      <div className=\"searchBox\">\n        <input\n          className=\"searchInput\"\n          type=\"text\"\n          aria-label=\"Search\"\n          placeholder=\"Type to filter posts...\"\n          onChange={handleInputChange}\n        />\n      </div>\n\n      {posts.map(({ node }) => {\n        const { excerpt } = node\n\n        const { slug } = node.fields\n        const { tags, title, date, description } = node.frontmatter\n        return (\n          <article key={slug}>\n            <header>\n              <h2>\n                <Link to={slug}>{title}</Link>\n              </h2>\n\n              <p>{date}</p>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: excerpt,\n                }}\n              />\n            </section>\n            <hr />\n          </article>\n        )\n      })}\n    </>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: frontmatter___date }) {\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          id\n          frontmatter {\n            title\n            description\n            date(formatString: \"MMMM DD, YYYY\")\n\n            tags\n          }\n\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}